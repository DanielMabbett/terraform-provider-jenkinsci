package jenkinsci

import (
	"fmt"
	"os"
	"regexp"
	"testing"

	// "github.com/Azure/go-autorest/autorest/azure"
	// "github.com/hashicorp/go-azure-helpers/authentication"
	"github.com/DanielMabbett/terraform-provider-jenkinsci/jenkinsci"
	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
	// "github.com/terraform-providers/terraform-provider-azuread/azuread"
)

var testAccProviders map[string]terraform.ResourceProvider
var testAccProvider *schema.Provider

func init() {
	testAccProvider = Provider().(*schema.Provider)
	testAccProviders = map[string]terraform.ResourceProvider{
		"azurerm":   testAccProvider,
		"jenkinsci": jenkinsci.Provider().(*schema.Provider),
	}
}

func TestProvider(t *testing.T) {
	if err := Provider().(*schema.Provider).InternalValidate(); err != nil {
		t.Fatalf("err: %s", err)
	}
}

func TestProvider_impl(t *testing.T) {
	var _ = Provider()
}

func testAccPreCheck(t *testing.T) {
	variables := []string{
		"JENKINS_ENDPOINT",
		"JENKINS_ADMIN_USERNAME",
		"JENKINS_ADMIN_PASSWORD",
	}

	for _, variable := range variables {
		value := os.Getenv(variable)
		if value == "" {
			t.Fatalf("`%s` must be set for acceptance tests!", variable)
		}
	}
}

func testGetAzureConfig(t *testing.T) *authentication.Config {
	if os.Getenv(resource.TestEnvVar) == "" {
		t.Skip(fmt.Sprintf("Integration test skipped unless env '%s' set", resource.TestEnvVar))
		return nil
	}

	builder := authentication.Builder{
		SubscriptionID: os.Getenv("JENKINS_ENDPOINT"),
		ClientID:       os.Getenv("JENKINS_ADMIN_USERNAME"),
		TenantID:       os.Getenv("JENKINS_ADMIN_PASSWORD"),
	}

	config, err := builder.Build()
	if err != nil {
		t.Fatalf("Error building ARM Client: %+v", err)
		return nil
	}

	return config
}

func testRequiresImportError(resourceName string) *regexp.Regexp {
	message := "to be managed via Terraform this resource needs to be imported into the State. Please see the resource documentation for %q for more information."
	return regexp.MustCompile(fmt.Sprintf(message, resourceName))
}
